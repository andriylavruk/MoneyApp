@page "/"
@using MoneyApp.Client.Providers;

<div class="container pb-3">
    <h1 class="mb-4 text-center">MoneyApp</h1>

    <div class="p-5 mb-4 bg-light rounded-3">
        <div class="container-fluid py-5">
            <h1 class="display-5 fw-bold">MoneyApp</h1>
            <p class="col-md-8 fs-4">MoneyApp is an application that will allow you to group your money transactions in one place and optimize your time for counting them. Also, this application will give you a wide list of functions for working with expenses and income, including dividing them by category. Each user has the opportunity to register or log into an existing account.</p>
        </div>
    </div>

    <div class="row align-items-md-stretch">
        <div class="col-md-6">
            <div class="h-100 p-5 text-white bg-dark rounded-3">
                <h2>Expenses / Incomes</h2>
                <p>The main functionality of this application is expenses and income. The user can perform basic operations: creation, editing, deletion and viewing. The user has his own list of expenses and incomes, which belongs only to him.</p>
            </div>
        </div>

        <div class="col-md-6">
            <div class="h-100 p-5 bg-light border rounded-3">
                <h2>Categories</h2>
                <p>This web application allows you to add expenses and income with the corresponding categories, which in turn allows you to separate them according to different priorities or parameters. Categories can be created, edited and deleted.</p>
            </div>
        </div>
    </div>
</div>

@code{
    [Inject] 
    HttpClient HttpClient { get; set; }

    [Inject] 
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }
    }
}
