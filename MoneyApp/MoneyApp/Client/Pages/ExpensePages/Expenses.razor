@page "/expenses"
@inject IExpenseService ExpenseService
@inject IExpenseCategoryService ExpenseCategoryService
@inject NavigationManager NavigationManager

<PageTitle>Expenses</PageTitle>

@if(_signInSuccessful == false)
{
    <h3>You are not authorized.</h3>
}
else
{
    <h3>Expenses</h3>

    <div class="form-inline">
        <form class="d-flex">
            <input type="text" class="form-control mb-2 mr-sm-2 me-1"
               placeholder="Search"
               @bind="ExpenseService.SearchFilter">
            <button type="button" class="btn btn-primary mr-sm-2 mb-2 me-1"
                @onclick="Search">
                Search
            </button>
            <button type="button" class="btn btn-danger mr-sm-2 mb-2"
                @onclick="Clear">
                Clear
            </button>
        </form>
    </div>

    @if (ExpenseService.Expenses == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (ExpenseService.Expenses.Count == 0)
    {
        <p>There are no Expenses.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Expense Category</th>
                    <th>Description</th>
                    <th>Amount</th>
                    <th>DateCreated</th>
                    <th>Options</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var expense in ExpenseService.Expenses)
                {
                    <tr>
                        <td>@expense.ExpenseCategory?.CategoryName</td>
                        <td>@expense.Description</td>
                        <td>@expense.Amount</td>
                        <td>@expense.DateCreated.ToString("dd.MM.yyyy HH:mm")</td>
                        <td>
                            <button class="btnalert-primary" @onclick="(() => ShowExpense(expense.Id))"><i class="oi oi-pencil"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <Pagination TotalPagesQuantity="ExpenseService.TotalPageQuantity" CurrentPage="ExpenseService.CurrentPage" Radius="2"
            SelectedPage="SelectedPage">
        </Pagination>
    }

    <button class="btn btn-primary" @onclick="CreateNewExpense">Create Expense</button>
}

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    protected bool _signInSuccessful = false;

    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;

        try
        {
            if (user.Identity.IsAuthenticated == true)
            {
                _signInSuccessful = true;
                await ExpenseService.GetAllItems(ExpenseService.CurrentPage);
            }
            else
            {
                _signInSuccessful = false;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task Search()
    {
        ExpenseService.CurrentPage = 1;
        await ExpenseService.GetAllItems(ExpenseService.CurrentPage);
    }

    private async Task Clear()
    {
        ExpenseService.SearchFilter = string.Empty;
        ExpenseService.CurrentPage = 1;
        await ExpenseService.GetAllItems(ExpenseService.CurrentPage);
        NavigationManager.NavigateTo("/expenses");
    }

    protected async Task SelectedPage(int page)
    {
        ExpenseService.CurrentPage = page;
        await ExpenseService.GetAllItems(page);
    }

    void ShowExpense(int id)
    {
        NavigationManager.NavigateTo($"expense/{id}");
    }

    void CreateNewExpense()
    {
        NavigationManager.NavigateTo("/expense");
    }
}
