@page "/incomecategory"
@page "/incomecategory/{id:int}"
@inject IIncomeCategoryService IncomeCategoryService

@if (Id == null)
{
    <PageTitle>Create a new Income Category</PageTitle>
    <h3>Create a new Income Category</h3>
}
else
{
    <PageTitle>Edit Income Category</PageTitle>
    <h3>Edit Income Category</h3>
}

<EditForm Model="incomeCategory" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div>
        <label for="categoryName">Category Name</label>
        <InputText id="categoryName" @bind-Value="incomeCategory.CategoryName" class="form-control"></InputText>
        <ValidationMessage For="@(() => incomeCategory.CategoryName)"></ValidationMessage>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if (Id != null)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteIncomeCategory">Delete Income Category</button>
    }
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    IncomeCategoryDTO incomeCategory = new IncomeCategoryDTO();

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            //Create Income Category
        }
        else
        {
            incomeCategory = await IncomeCategoryService.GetIncomeCategoryById((int)Id);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save New Income Category" : "Update Income Category";
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await IncomeCategoryService.CreateIncomeCategory(incomeCategory);
        }
        else
        {
            await IncomeCategoryService.UpdateIncomeCategory(incomeCategory);
        }
    }

    async Task DeleteIncomeCategory()
    {
        await IncomeCategoryService.DeleteIncomeCategory(incomeCategory.Id);
    }
}
