@page "/incomecategory"
@page "/incomecategory/{id:int}"
@inject IIncomeCategoryService IncomeCategoryService

<div class="container py-5 h-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
        <div class="col-12 col-md-12 col-lg-12 col-xl-12">
            <div class="card shadow-lg" style="border-radius: 1rem;">
                <div class="card-body p-5">
                    @if (_signInSuccessful == false)
                    {
                        <h3>You are not authorized.</h3>
                    }
                    else
                    {
                        @if (Id == null)
                        {
                            <PageTitle>Create a new Income Category</PageTitle>
                            <h3>Create a new Income Category</h3>
                        }
                        else
                        {
                            <PageTitle>Edit Income Category</PageTitle>
                            <h3>Edit Income Category</h3>
                        }

                        <br />

                        <EditForm Model="incomeCategory" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <div>
                                <label for="categoryName">Category Name</label>
                                <InputText id="categoryName" @bind-Value="incomeCategory.CategoryName" class="form-control"></InputText>
                                <ValidationMessage For="@(() => incomeCategory.CategoryName)"></ValidationMessage>
                            </div>
                            <br />

                            <button type="submit" class="btn btn-success m-1">@btnText</button>
                            @if (Id != null)
                            {
                                <button type="button" class="btn btn-danger m-1" @onclick="DeleteIncomeCategory">Delete Income Category</button>
                            }
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    IncomeCategoryDTO incomeCategory = new IncomeCategoryDTO();

    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    protected bool _signInSuccessful = false;

    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;

        btnText = Id == null ? "Create New Income Category" : "Update Income Category";

        try
        {
            if (user.Identity.IsAuthenticated == true)
            {
                _signInSuccessful = true;
            }
            else
            {
                _signInSuccessful = false;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            //Create Income Category
        }
        else
        {
            incomeCategory = await IncomeCategoryService.GetIncomeCategoryById((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await IncomeCategoryService.CreateIncomeCategory(incomeCategory);
        }
        else
        {
            await IncomeCategoryService.UpdateIncomeCategory(incomeCategory);
        }
    }

    async Task DeleteIncomeCategory()
    {
        await IncomeCategoryService.DeleteIncomeCategory(incomeCategory.Id);
    }
}
