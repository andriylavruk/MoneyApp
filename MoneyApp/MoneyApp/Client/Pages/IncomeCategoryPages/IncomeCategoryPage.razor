@page "/incomecategory"
@page "/incomecategory/{id:int}"
@inject IIncomeCategoryService IncomeCategoryService


@if(_signInSuccessful == false)
{
    <h3>You are not authorized.</h3>
}
else
{
    @if (Id == null)
    {
        <PageTitle>Create a new Income Category</PageTitle>
        <h3>Create a new Income Category</h3>
    }
    else
    {
        <PageTitle>Edit Income Category</PageTitle>
        <h3>Edit Income Category</h3>
    }

    <EditForm Model="incomeCategory" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div>
            <label for="categoryName">Category Name</label>
            <InputText id="categoryName" @bind-Value="incomeCategory.CategoryName" class="form-control"></InputText>
            <ValidationMessage For="@(() => incomeCategory.CategoryName)"></ValidationMessage>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">@btnText</button>
        @if (Id != null)
        {
            <button type="button" class="btn btn-danger" @onclick="DeleteIncomeCategory">Delete Income Category</button>
        }
    </EditForm>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    IncomeCategoryDTO incomeCategory = new IncomeCategoryDTO();

    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    protected bool _signInSuccessful = false;

    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;

        btnText = Id == null ? "Save New Income Category" : "Update Income Category";

        try
        {
            if (user.Identity.IsAuthenticated == true)
            {
                _signInSuccessful = true;
            }
            else
            {
                _signInSuccessful = false;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            //Create Income Category
        }
        else
        {
            incomeCategory = await IncomeCategoryService.GetIncomeCategoryById((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await IncomeCategoryService.CreateIncomeCategory(incomeCategory);
        }
        else
        {
            await IncomeCategoryService.UpdateIncomeCategory(incomeCategory);
        }
    }

    async Task DeleteIncomeCategory()
    {
        await IncomeCategoryService.DeleteIncomeCategory(incomeCategory.Id);
    }
}
