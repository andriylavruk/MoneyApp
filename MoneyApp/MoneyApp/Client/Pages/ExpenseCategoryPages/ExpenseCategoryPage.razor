@page "/expensecategory"
@page "/expensecategory/{id:int}"
@inject IExpenseCategoryService ExpenseCategoryService

@if (_signInSuccessful == false)
{
    <h3>You are not authorized.</h3>
}
else
{
    @if (Id == null)
    {
        <PageTitle>Create a new Expense Category</PageTitle>
        <h3>Create a new Expense Category</h3>
    }
    else
    {
        <PageTitle>Edit Expense Category</PageTitle>
        <h3>Edit Expense Category</h3>
    }

    <EditForm Model="expenseCategory" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div>
            <label for="categoryName">Category Name</label>
            <InputText id="categoryName" @bind-Value="expenseCategory.CategoryName" class="form-control"></InputText>
            <ValidationMessage For="@(() => expenseCategory.CategoryName)"></ValidationMessage>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">@btnText</button>
        @if (Id != null)
        {
            <button type="button" class="btn btn-danger" @onclick="DeleteExpenseCategory">Delete Expense Category</button>
        }
    </EditForm>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    ExpenseCategoryDTO expenseCategory = new ExpenseCategoryDTO();

    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    protected bool _signInSuccessful = false;

    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;

        btnText = Id == null ? "Save New Expense Category" : "Update Expense Category";

        try
        {
            if (user.Identity.IsAuthenticated == true)
            {
                _signInSuccessful = true;
            }
            else
            {
                _signInSuccessful = false;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id == null)
        {
            //Create Expense Category
        }
        else
        {
            expenseCategory = await ExpenseCategoryService.GetExpenseCategoryById((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await ExpenseCategoryService.CreateExpenseCategory(expenseCategory);
        }
        else
        {
            await ExpenseCategoryService.UpdateExpenseCategory(expenseCategory);
        }
    }

    async Task DeleteExpenseCategory()
    {
        await ExpenseCategoryService.DeleteExpenseCategory(expenseCategory.Id);
    }
}
