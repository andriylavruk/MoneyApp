@page "/expensecategories"
@inject IExpenseCategoryService ExpenseCategoryService
@inject NavigationManager NavigationManager

<PageTitle>Expense Categories</PageTitle>

<div class="container py-5 h-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
        <div class="col-12 col-md-12 col-lg-12 col-xl-12">
            <div class="card shadow-lg" style="border-radius: 1rem;">
                <div class="card-body p-5">
                    @if (_signInSuccessful == false)
                    {
                        <h3>You are not authorized.</h3>
                    }
                    else
                    {
                        <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-between mb-4">
                            <h3>Expense Categories</h3>
                            <button class="btn btn-success" @onclick="CreateNewExpenseCategory">Create Expense Category</button>
                        </div>

                        <div class="form-inline">
                            <form class="d-flex">
                                <input type="text" class="form-control mb-2 mr-sm-2 me-1"
                                   placeholder="Search"
                                   @bind="ExpenseCategoryService.SearchFilter">
                                <button type="button" class="btn btn-primary mr-sm-2 mb-2 me-1"
                                    @onclick="Search">
                                    Search
                                </button>
                                <button type="button" class="btn btn-danger mr-sm-2 mb-2"
                                    @onclick="Clear">
                                    Clear
                                </button>
                            </form>
                        </div>
                        <br />

                        @if (ExpenseCategoryService.ExpenseCategories == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else if (ExpenseCategoryService.ExpenseCategories.Count == 0)
                        {
                            <p>There are no Expense Categories.</p>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Category name</th>
                                            <th>Options</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var expenseCategory in ExpenseCategoryService.ExpenseCategories)
                                        {
                                            <tr class="text-nowrap align-middle">
                                                <td width="91%" class="text-truncate" style="max-width: 100px;">@expenseCategory.CategoryName</td>
                                                <td width="9%">
                                                    <button class="btn alert-primary" @onclick="(() => ShowExpenseCategory(expenseCategory.Id))"><i class="oi oi-pencil"></i></button>
                                                    <button class="btn alert-danger" @onclick="(() => DeleteExpenseCategory(expenseCategory.Id))"><i class="oi oi-basket"></i></button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            <br />

                            <Pagination TotalPagesQuantity="ExpenseCategoryService.TotalPageQuantity" CurrentPage="ExpenseCategoryService.CurrentPage" Radius="2"
                                SelectedPage="SelectedPage">
                            </Pagination>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthenticationState { get; set; }

    protected bool _signInSuccessful = false;

    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;

        try
        {
            if (user.Identity.IsAuthenticated == true)
            {
                _signInSuccessful = true;
                await ExpenseCategoryService.GetAllItems(ExpenseCategoryService.CurrentPage);
            }
            else
            {
                _signInSuccessful = false;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task Search()
    {
        ExpenseCategoryService.CurrentPage = 1;
        await ExpenseCategoryService.GetAllItems(ExpenseCategoryService.CurrentPage);
    }

    private async Task Clear()
    {
        ExpenseCategoryService.SearchFilter = string.Empty;
        ExpenseCategoryService.CurrentPage = 1;
        await ExpenseCategoryService.GetAllItems(ExpenseCategoryService.CurrentPage);
        NavigationManager.NavigateTo("/expensecategories");
    }

    protected async Task SelectedPage(int page)
    {
        ExpenseCategoryService.CurrentPage = page;
        await ExpenseCategoryService.GetAllItems(page);
    }

    void ShowExpenseCategory(int id)
    {
        NavigationManager.NavigateTo($"expensecategory/{id}");
    }

    void CreateNewExpenseCategory()
    {
        NavigationManager.NavigateTo("/expensecategory");
    }

    async Task DeleteExpenseCategory(int id)
    {
        await ExpenseCategoryService.DeleteExpenseCategory(id);
        await ExpenseCategoryService.GetAllItems(ExpenseCategoryService.CurrentPage);
    }
}
